openapi: 3.0.0
info:
  version: '1.0'
  title: RAA API for searching candidates
  description: ''
paths:
  /employers/{employerId}/candidates:
    get:
      summary: Returns candidates for the employer (associated via the employers vacancies)
      parameters:
        - name: employerId
          in: path
          required: true
          description: The employer id to search candidates within
          schema:
            type : string
        - name: searchTerm
          in: query
          description: search by first name and surname
          schema:
            type: string
        - name: status
          in: query
          required: true
          description: The status of related vacancy to filter on, multiple can be included ?status[]=Successful&status[]=Interviewing
          schema:
            type: array
            items:
              $ref: "#/components/schemas/candidateStatus"
        - name: withinWeeks 
          in: query
          description: Limit returned candidates to those associated with vacancies within the specified weeks
          schema:
            type: integer
            default: 4
            minimum: 1
            maximum: 50
        - name: standardLarsCode
          in: query
          description: The lars code of the standard (as used by recruit)
          schema:
            type: integer
        - name: includeRelatedStandards
          in: query
          description: If true, will also include vacancies for standard which have the same parent route as the specified standardLarsCode.
          schema:
            type: boolean
            default: false
        - name: includePrevLinked
          in: query
          description: If true, will also include vacancies for standard which have the same parent route as the specified standardLarsCode.
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: The page to return
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize 
          in: query
          description: The page size to request. The page size will default to 20
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 50
        - name: sortBy
          in: query
          description: The sort column
          schema:
            $ref:  "#/components/schemas/sortColumns"
        - name: sortDesc 
          in: query
          description: The sort order descending
          schema:
            type: boolean
            default: true
      responses:
        '200':
          $ref: '#/components/responses/searchResult'            
  
  /employers/{employerId}/candidates/{candidateId}:
    get:
      summary: Returns a candidate by their unique id
      parameters:
        - name: candidateId
          in: path
          required: true
          description: The candidate id to return
          schema:
            type : string
        - name: employerId
          in: path
          required: true
          description: The employer id to return
          schema:
            type : string
      responses: 
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/notFound'

components:
  responses:
    searchResult:
      description: The search results response to the consumer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/searchResponse'
      
    notFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

  schemas:
    # Schema for error response body
    error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    searchResponse:
      type: object
      properties:
        pageInfo:
          $ref: "#/components/schemas/pagedDataResponse"
        candidates:
          type: array
          items:
            $ref:  "#/components/schemas/candidateResponse"
      required:
        - pageInfo
        - candidates

    candidateResponse:
      type: object
      properties:
        candidateId:
          type: string
        firstName:
          type: string
        surname:
          type: string
        applicationId:
          type: string
        dob:
          type: string
          format: date
        vacancyName:
          type: string
        status:
          $ref:  "#/components/schemas/candidateStatus"

    pagedDataResponse:
      type: object
      properties:
        total:
          type: integer
          minimum: 0
        page: 
          type: integer
          minimum: 1
        pageSize: 
          type: integer
          minimum: 1
          maximum: 20
        totalPages: 
          type: integer
          minimum: 1
      required:
        - page
        - total
        - pageSize  
        - totalPages  

    candidateStatusRequest:
      type: object
      properties:
        status:
          $ref:  "#/components/schemas/candidateStatus"
        commitmentId: 
          type: integer
          minimum: 1
      required:
        - status
        - commitmentId
    
    sortColumns:
      type: string
      enum:
        - name
        - applicationId
        - dob
        - vacancyName
        - status

    candidateStatus:
      type: string
      enum:
        - Successful Commitment Linked
        - Successful
        - Reviewed by you
        - Interviewing
        - In review with provider