@using Esfa.Recruit.Employer.Web.ViewModels.VacancyPreview
@using Esfa.Recruit.Shared.Web.ViewModels.TaskList
@using Esfa.Recruit.Vacancies.Client.Domain.Entities
@model Esfa.Recruit.Employer.Web.ViewModels.VacancyPreview.VacancyPreviewViewModel

@{ ViewBag.GaData.Vpv = "/recruitment/employer/task-list"; }

@section BackLink {
    <a asp-route="@RouteNames.Dashboard_Get" asp-route-employerAccountId="@Model.EmployerAccountId" esfa-automation="link-back" class="govuk-back-link">Return to your applications</a>
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-xl">
            Create an apprenticeship advert
        </h1>
        <ol class="das-task-list">
            <li>
                <partial name="_TaskListHeader" model="@(new TaskListHeaderViewModel(1, "Advert summary", Model.TaskListSectionOneState))" />
                <ul class="das-task-list__items">
                    <li class="das-task-list__item">
                        <span>
                            @if (Model.TaskListSectionOneState == VacancyTaskListSectionState.NotStarted)
                            {
                                <a class="govuk-link govuk-link--no-visited-state" asp-route="@RouteNames.CreateVacancy_Get" asp-route-employerAccountId="@Model.EmployerAccountId">
                                    Advert title
                                </a>
                            }
                            else
                            {
                                <a class="govuk-link govuk-link--no-visited-state" asp-route="@RouteNames.Title_Get" asp-all-route-data="@Model.RouteDictionary">
                                    Advert title
                                </a>
                            }
                        </span>
                    </li>
                    @if (Model.AccountLegalEntityCount > 1)
                    {
                        <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.TitleSectionState != VacancyPreviewSectionState.Incomplete,
                                            "Name of organisation", RouteNames.Employer_Get, Model.RouteDictionary))"/>
                    }
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.HasSelectedLegalEntity, "Training course", RouteNames.Training_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.TrainingSectionState != VacancyPreviewSectionState.Incomplete,
                                        "Training provider", RouteNames.TrainingProvider_Select_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.ProviderSectionState != VacancyPreviewSectionState.Incomplete,
                                        "Summary of the apprenticeship", RouteNames.ShortDescription_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.ShortDescriptionSectionState != VacancyPreviewSectionState.Incomplete,
                                        "What the apprentice will do at work", RouteNames.VacancyWorkDescription_Index_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.DescriptionsSectionState != VacancyPreviewSectionState.Incomplete,
                                        "How the apprentice will train", RouteNames.VacancyHowTheApprenticeWillTrain_Index_Get, Model.RouteDictionary))"/>
                </ul>
            </li>
            <li>
                <partial name="_TaskListHeader" model="@(new TaskListHeaderViewModel(2, "Employment details", Model.TaskListSectionTwoState))" />
                <ul class="das-task-list__items">
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.TaskListSectionOneState == VacancyTaskListSectionState.Completed,
                                                             "Closing and start dates", RouteNames.Dates_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(!(Model.ClosingDateSectionState == VacancyPreviewSectionState.Incomplete || Model.PossibleStartDateSectionState == VacancyPreviewSectionState.Incomplete),
                                                             "Duration and working hours", RouteNames.Duration_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.ExpectedDurationSectionState != VacancyPreviewSectionState.Incomplete,
                                                             "Pay rate and benefits", RouteNames.Wage_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.WageTextSectionState != VacancyPreviewSectionState.Incomplete,
                                                             "Number of positions", RouteNames.NumberOfPositions_Get, Model.RouteDictionary))"/>
                    <esfaFeatureEnabled name="@FeatureNames.MultipleLocations">
                        <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.NumberOfPositionsSectionState != VacancyPreviewSectionState.Incomplete,
                                                                 "Locations", RouteNames.MultipleLocations_Get, Model.RouteDictionary))"/>
                    </esfaFeatureEnabled>
                    <esfaFeatureDisabled name="@FeatureNames.MultipleLocations">
                        <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.NumberOfPositionsSectionState != VacancyPreviewSectionState.Incomplete,
                                                                 "Address", RouteNames.Location_Get, Model.RouteDictionary))"/>
                    </esfaFeatureDisabled>
                </ul>
            </li>
            <li>
                <partial name="_TaskListHeader" model="@(new TaskListHeaderViewModel(3, "Requirements and prospects", Model.TaskListSectionThreeState))" />
                <ul class="das-task-list__items">
                    @if (Model.ApprenticeshipType is ApprenticeshipTypes.Foundation)
                    {
                        <p class="govuk-body govuk-hint">Foundation apprenticeships do not require the applicants to
                            have specific skills or qualifications before applying.</p>
                        <partial name="_TaskListItem" model="@(new DisabledTaskListItemViewModel("Skills (not required)"))"/>
                        <partial name="_TaskListItem" model="@(new DisabledTaskListItemViewModel("Qualifications (not required)"))"/>
                        <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.EmployerAddressSectionState != VacancyPreviewSectionState.Incomplete,
                                                                 "Future prospects", RouteNames.FutureProspects_Get, Model.RouteDictionary))"/>
                    }
                    else
                    {
                        <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.EmployerAddressSectionState != VacancyPreviewSectionState.Incomplete,
                                                                 "Skills", RouteNames.Skills_Get, Model.RouteDictionary))"/>
                        <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.SkillsSectionState != VacancyPreviewSectionState.Incomplete,
                                                                 "Qualifications", RouteNames.Qualifications_Get, Model.RouteDictionary))"/>
                        <partial name="_TaskListItem" model="@(new TaskListItemViewModel(!(Model.HasOptedToAddQualifications is null || Model.HasOptedToAddQualifications is true && Model.QualificationsSectionState == VacancyPreviewSectionState.Incomplete),
                                                                 "Future prospects", RouteNames.FutureProspects_Get, Model.RouteDictionary))"/>
                    }

                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.FutureProspectsSectionState != VacancyPreviewSectionState.Incomplete,
                                                             "Other things to consider", RouteNames.Considerations_Get, Model.RouteDictionary))"/>
                </ul>
            </li>
            <li>
                <partial name="_TaskListHeader" model="@(new TaskListHeaderViewModel(4, "About the employer", Model.TaskListSectionFourState))" />
                <ul class="das-task-list__items">
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.TaskListSectionThreeState == VacancyTaskListSectionState.Completed,
                                                             "Name of employer on advert", RouteNames.EmployerName_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.HasSelectedEmployerNameOption,
                                                             "Employer information", RouteNames.AboutEmployer_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.HasSelectedEmployerNameOption,
                                                             "Contact details", RouteNames.EmployerContactDetails_Get, Model.RouteDictionary))"/>
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.HasSelectedEmployerNameOption && !Model.EmployerDescriptionRequiresEdit && Model.TaskListSectionThreeState == VacancyTaskListSectionState.Completed,
                                                             "Website for applications", RouteNames.ApplicationProcess_Get, Model.RouteDictionary))"/>
                </ul>
            </li>
            <li>
                @{
                    var sectionFourState = Model.TaskListSectionFiveState == VacancyTaskListSectionState.Completed
                        ? VacancyTaskListSectionState.Completed
                        : VacancyTaskListSectionState.NotStarted;
                }
                <partial name="_TaskListHeader" model="@(new TaskListHeaderViewModel(5, "Application", sectionFourState))" />
                <ul class="das-task-list__items">
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.TaskListSectionFourState == VacancyTaskListSectionState.Completed,
                                        "Questions for applicants", RouteNames.AdditionalQuestions_Get, Model.RouteDictionary))"/>
                </ul>
            </li>
            <li>
                @{
                    var sectionFiveState = Model.TaskListSectionFiveState switch
                    {
                        VacancyTaskListSectionState.Completed => VacancyTaskListSectionState.InProgress,
                        _ when Model.Status == VacancyStatus.Submitted => VacancyTaskListSectionState.Completed,
                        _ => VacancyTaskListSectionState.NotStarted
                    };
                }
                <partial name="_TaskListHeader" model="@(new TaskListHeaderViewModel(6, "Check and submit your advert", sectionFiveState))" />
                <ul class="das-task-list__items">
                    <partial name="_TaskListItem" model="@(new TaskListItemViewModel(Model.TaskListSectionFiveState == VacancyTaskListSectionState.Completed,
                                        "Check your answers and submit your advert", RouteNames.EmployerCheckYourAnswersGet, Model.RouteDictionary))"/>
                </ul>
            </li>
        </ol>

        <hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

        <p class="govuk-heading-s">No longer need this advert?</p>
        <a asp-route="@RouteNames.DeleteVacancy_Get" asp-all-route-data="@Model.RouteDictionary" class="govuk-button govuk-button--warning" esfa-automation="delete-button">Delete advert</a>

    </div>
</div>