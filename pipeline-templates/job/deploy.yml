parameters:
  Environment:
  ServiceConnection:

jobs:
- deployment: DeployInfrastructure
  workspace:
    clean: all
  pool:
    vmImage: windows-2022
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SubscriptionId: $(SubscriptionId)
            Location: $(ResourceGroupLocation)
            Environment: ${{ parameters.Environment }}
            TemplatePath: $(Pipeline.Workspace)/Recruit/azure/template.json
            ParametersPath: $(Pipeline.Workspace)/Recruit/azure/template.parameters.json
            IsMultiRepoCheckout: false
            TemplateSecrets:
              LoggingRedisConnectionString: $(LoggingRedisConnectionString)
              ConfigurationStorageConnectionString: $(ConfigurationStorageConnectionString)

        - task: UseDotNet@2
          displayName: 'Install .NET Core sdk'
          inputs:
            packageType: sdk
            version: 2.1.x
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: PowerShell@2
          displayName: 'Seed Recruit Database'
          inputs:
            filePath: $(Pipeline.Workspace)/Recruit/Console.RecruitSeedDataWriter/SeedScript.ps1
            arguments: -dbConnectionString "$(RecruitCosmosConnectionString)"
            pwsh: true

        # Requires dotnet and mongo CLIs
        - task: PowerShell@2
          displayName: 'Run Mongo API Script'
          inputs:
            filePath: $(Pipeline.Workspace)/Recruit/src/Data/Recruit.ChangeScripts/Invoke-CosmosDbScript.ps1
            arguments: '-CosmosDb $(CosmosDbName).documents.azure.com:10255 -Username $(CosmosDbName) -Password $(CosmosDbPrimaryReadWriteKey) -MongoScript "$(Pipeline.Workspace)/Recruit/src/Data/Recruit.ChangeScripts/documentMigration.js"'
            pwsh: true

        - template: azure-pipelines-templates/deploy/step/generate-config.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SourcePath: $(Pipeline.Workspace)/das-employer-config/Configuration/das-recruit
            TargetFileName: '*.schema.json'
            TableName: Configuration

- deployment: DeployWorker
  dependsOn: DeployInfrastructure
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    JobsAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.JobsAppServiceName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/webjob-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(JobsAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Recruit.Vacancies.Jobs.Zip
            VirtualApplication: 'Recruit.Vacancies.Jobs'

- deployment: DeployApi
  dependsOn: DeployWorker
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    ApiAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ApiAppServiceName'] ]    
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(ApiAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Recruit.Api.Zip

- deployment: DeployEmployerWeb
  dependsOn: DeployApi
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    EmployerAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.EmployerAppServiceName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(EmployerAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Employer.Web.Zip

- deployment: DeployProviderWeb
  dependsOn: DeployApi
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    ProviderAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ProviderAppServiceName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(ProviderAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Provider.Web.Zip

- deployment: DeployQAWeb
  dependsOn: DeployApi
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    QAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.QAAppServiceName'] ]    
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(QAAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/QA.Web.Zip