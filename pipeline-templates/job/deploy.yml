parameters:
  Environment:
  ServiceConnection:
  AppRoleAssignmentsServiceConnection:
  AADGroupObjectIdArray:

jobs:
- deployment: DeployInfrastructure
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/wait-azure-devops-deployment.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            EnvironmentId: $(Environment.Id)
            PipelineName: $(Build.DefinitionName)
            RunId: $(Build.BuildId)
            SleepTime: 120
            RetryLimit: 15
        - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SubscriptionId: $(SubscriptionId)
            Location: $(ResourceGroupLocation)
            Environment: ${{ parameters.Environment }}
            TemplatePath: $(Pipeline.Workspace)/Recruit/azure/template.json
            ParametersPath: $(Pipeline.Workspace)/Recruit/azure/template.parameters.json
            IsMultiRepoCheckout: true
            TemplateSecrets:
              LoggingRedisConnectionString: $(LoggingRedisConnectionString)
              ConfigurationStorageConnectionString: $(ConfigurationStorageConnectionString)

        - task: UseDotNet@2
          displayName: 'Install .NET Core sdk'
          inputs:
            packageType: sdk
            version: 2.1.x
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - template: azure-pipelines-templates/deploy/step/generate-config.yml@das-platform-building-blocks
          parameters:
            EnvironmentName: $(EnvironmentName)
            ServiceConnection: ${{ parameters.ServiceConnection }}
            SourcePath: $(Pipeline.Workspace)/das-employer-config/Configuration/das-recruit
            StorageAccountName: $(ConfigurationStorageAccountName)
            StorageAccountResourceGroup: $(SharedEnvResourceGroup)
            TargetFileName: '*.schema.json'
            TableName: Configuration
            ConfigurationSecrets:
              RecruitCosmosConnectionString: $(RecruitCosmosConnectionString)
              RecruitStorageConnectionString: $(RecruitStorageConnectionString)
              ProviderRegistrationsApiClientSecret: $(ProviderRegistrationsApiClientSecret)
              RecruitApimSubscriptionKey: $(RecruitApimSubscriptionKey)
              AccountsApiClientSecret: $(AccountsApiClientSecret)
              IdentityClientSecret: $(IdentityClientSecret)
              SlackWebHookUrl: $(SlackWebHookUrl)
              DefaultSessionRedisConnectionString: $(DefaultSessionRedisConnectionString)
              LoggingRedisConnectionString: $(LoggingRedisConnectionString)
              FaaStorageConnectionString: $(FaaStorageConnectionString)
              GoogleMapsPrivateKey: $(GoogleMapsPrivateKey)
              VacanciesApiReadSubscriptionKey: $(VacanciesApiReadSubscriptionKey)
              NotificationsClientToken: $(NotificationsClientToken)
              NServiceBusLicense: $(NServiceBusLicense)

- deployment: DeployWorker
  dependsOn: DeployInfrastructure
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    JobsAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.JobsAppServiceName'] ]
    ResourceGroupName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ResourceGroupName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(JobsAppServiceName)
            Tenant: $(Tenant)
            AADGroupObjectIdArray: ${{ parameters.AADGroupObjectIdArray }}
            IsMultiRepoCheckout: false
        - template: azure-pipelines-templates/deploy/step/webjob-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(JobsAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Recruit.Vacancies.Jobs.Zip
            ResourceGroupName: $(ResourceGroupName)
            VirtualApplication: 'Recruit.Vacancies.Jobs'

- deployment: DeployApi
  dependsOn:
  - DeployInfrastructure
  - DeployWorker
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    ApiAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ApiAppServiceName'] ]
    ResourceGroupName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ResourceGroupName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(ApiAppServiceName)
            Tenant: $(Tenant)
            AADGroupObjectIdArray: ${{ parameters.AADGroupObjectIdArray }}
            IsMultiRepoCheckout: false
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(ApiAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Recruit.Api.Zip

- deployment: DeployEmployerWeb
  dependsOn:
  - DeployInfrastructure
  - DeployApi
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    EmployerAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.EmployerAppServiceName'] ]
    ResourceGroupName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ResourceGroupName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(EmployerAppServiceName)
            Tenant: $(Tenant)
            AADGroupObjectIdArray: ${{ parameters.AADGroupObjectIdArray }}
            IsMultiRepoCheckout: false
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(EmployerAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Employer.Web.Zip

- deployment: DeployProviderWeb
  dependsOn:
  - DeployInfrastructure
  - DeployApi
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    ProviderAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ProviderAppServiceName'] ]
    ResourceGroupName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ResourceGroupName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-role-assignments.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.AppRoleAssignmentsServiceConnection }}
            ResourceName: $(ProviderAppServiceName)
            Tenant: $(Tenant)
            AADGroupObjectIdArray: ${{ parameters.AADGroupObjectIdArray }}
            IsMultiRepoCheckout: false
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(ProviderAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/Provider.Web.Zip

- deployment: DeployQAWeb
  dependsOn:
  - DeployInfrastructure
  - DeployApi
  workspace:
    clean: all
  pool:
    name: DAS - Continuous Deployment Agents
  variables:
    QAAppServiceName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.QAAppServiceName'] ]
    ResourceGroupName: $[ dependencies.DeployInfrastructure.outputs['DeployInfrastructure.ArmOutputs${{ parameters.Environment }}.ResourceGroupName'] ]
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: azure-pipelines-templates/deploy/step/app-deploy.yml@das-platform-building-blocks
          parameters:
            ServiceConnection: ${{ parameters.ServiceConnection }}
            AppServiceName: $(QAAppServiceName)
            DeploymentPackagePath: $(Pipeline.Workspace)/Recruit/QA.Web.Zip
