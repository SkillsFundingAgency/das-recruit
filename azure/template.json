{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceEnvironmentName": {
      "type": "string"
    },
    "serviceName": {
      "type": "string"
    },
    "tags": {
      "type": "object"
    },
    "resourceGroupLocation": {
      "type": "string"
    },
    "webJobAspSize": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ]
    },
    "webJobAspInstances": {
      "type": "int"
    },
    "webJobNonASETier": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "EnvironmentFullName": {
      "type": "string"
    },
    "Authentication": {
      "type": "secureObject",
      "defaultValue": {
        "Authority": "",
        "MetaDataAddress": "",
        "ClientId": "",
        "ClientSecret": ""
      }
    },
    "AccountApiConfiguration": {
      "type": "secureObject",
      "defaultValue": {
        "ApiBaseUrl": "",
        "ClientId": "",
        "ClientSecret": "",
        "IdentifierUri": "",
        "Tenant": ""
      }
    },
    "ProviderRelationshipsApiConfiguration": {
      "type": "secureObject",
      "defaultValue": {
        "ApiBaseUrl": "",
        "ClientId": "",
        "ClientSecret": "",
        "IdentifierUri": "",
        "Tenant": ""
      }
    },
    "PasAccountApiConfiguration": {
      "type": "secureObject",
      "defaultValue": {
        "ApiBaseUrl": "",
        "ClientId": "",
        "ClientSecret": "",
        "IdentifierUri": "",
        "Tenant": ""
      }
    },
    "ExternalLinks": {
      "type": "object",
      "defaultValue": {
        "ManageApprenticeshipSiteUrl": "",
        "EmployerIdamsSiteUrl": "",
        "StaffIdamsUrl": "",
        "ProviderApprenticeshipSiteUrl": "",
        "CommitmentsSiteUrl": "",
        "ProviderCommitmentsSiteUrl": "",
        "SignProviderAgreementUrl": "",
        "ReservationsSiteUrl": "",
        "EmployerFavouritesUrl": "",
        "TrainingProviderPermissionUrl": ""
      }
    },
    "Features": {
      "type": "object",
      "defaultValue": {
        "SetNotificationPreferences": false
      }
    },
    "ConfigurationStorageConnectionString": {
      "type": "securestring"
    },
    "LoggingRedisConnectionString": {
      "type": "securestring",
      "defaultValue": ""
    },
    "StorageRedisConnectionString": {
      "type": "securestring",
      "defaultValue": ""
    },
    "DataProtectionKeysDatabase": {
      "type": "string",
      "defaultValue": ""
    },
    "ApprenticeshipProgrammesApiBaseUrl": {
      "type": "string",
      "defaultValue": ""
    },
    "GoogleMapsPrivateKey": {
      "type": "securestring",
      "defaultValue": ""
    },
    "UseTableStorageQueryStore": {
      "type": "bool",
      "defaultValue": false
    },
    "sharedFrontEndAppServicePlanName": {
      "type": "string"
    },
    "sharedFrontEndSubnetResourceId": {
      "type": "string"
    },
    "sharedEnvResourceGroup": {
      "type": "string"
    },
    "EmployerCustomHostname": {
      "type": "string"
    },
    "EmployerKeyvaultCertificateName": {
      "type": "string"
    },
    "QAAppCustomHostname": {
      "type": "string"
    },
    "QAAppKeyvaultCertificateName": {
      "type": "string"
    },
    "QAAuthentication": {
      "type": "object",
      "defaultValue": {
        "Wtrealm": "",
        "MetaDataAddress": ""
      }
    },
    "QALegacyAuthorization": {
      "type": "secureObject",
      "defaultValue": {
        "ClaimType": "",
        "UserClaimValue": "",
        "TeamLeadClaimValue": ""
      }
    },
    "QAAuthorization": {
      "type": "secureObject",
      "defaultValue": {
        "ClaimType": "",
        "UserClaimValue": "",
        "TeamLeadClaimValue": ""
      }
    },
    "ProviderAuthentication": {
      "type": "object",
      "defaultValue": {
        "Wtrealm": "",
        "MetaDataAddress": ""
      }
    },
    "SlackWebhook": {
      "type": "securestring",
      "defaultValue": ""
    },
    "FindAnApprenticeshipDetailPrefixUrl": {
      "type": "string",
      "defaultValue": ""
    },
    "GeocodePostcodeAnywhereKey": {
      "type": "securestring",
      "defaultValue": ""
    },
    "PostcodeAnywhereKey": {
      "type": "securestring",
      "defaultValue": ""
    },
    "ZenDesk": {
      "type": "secureObject",
      "defaultValue": {
        "EmployerSnippetSectionId": "",
        "ProviderSnippetSectionId": "",
        "SnippetKey": "",
        "CobrowsingSnippetKey": ""
      }
    },
    "FaaConfiguration": {
      "type": "secureObject",
      "defaultValue": {
        "StorageConnectionString": ""
      },
      "metadata": {
        "description": "StorageConnectionString requires at least the Send claim for the relevant Service Bus endpoint"
      }
    },
    "VacancyApiConfiguration": {
      "type": "secureObject"
    },
    "VacancyReviewAssignationTimeoutMinutes": {
      "type": "int",
      "defaultValue": 180
    },
    "EmployerAccountsSqlDbConnectionString": {
      "type": "securestring",
      "defaultValue": ""
    },
    "EmployerFinanceSqlDbConnectionString": {
      "type": "securestring",
      "defaultValue": ""
    },
    "VacancyAnalyticEventsSqlDbConnectionString": {
      "type": "securestring",
      "defaultValue": ""
    },
    "ProviderCustomHostname": {
      "type": "string"
    },
    "ProviderKeyvaultCertificateName": {
      "type": "string"
    },
    "DasSharedNServiceBusConfiguration": {
      "type": "secureObject"
    },
    "CommunicationsConfiguration": {
      "type": "secureObject"
    },
    "NotificationsApiClientConfiguration": {
      "type": "secureObject"
    },
    "cosmosDbIpRangeFilter": {
      "type": "string",
      "defaultValue": ""
    },
    "DasEncodings": {
      "type": "securestring"
    },
    "cosmosDatabase": {
      "type": "string"
    },
    "containerArray": {
      "type": "array"
    },
    "sharedKeyvaultName": {
      "type": "string"
    },
    "sharedManagementResourceGroup": {
      "type": "string"
    },
    "frontEndAccessRestrictions": {
      "type": "array"
    },
    "workerAccessRestrictions": {
      "type": "array"
    },
    "sharedApimResourceGroup": {
      "type": "string"
    },
    "sharedApimName": {
      "type": "string"
    },
    "recruitOuterApiConfigurationBaseUrl": {
      "type": "string"
    },
    "cosmosDbServerVersion": {
      "type": "string"
    },
    "sharedEnvVirtualNetworkName": {
      "type": "string"
    },
    "webjobSubnetObject": {
      "type": "object"
    },
    "subnetServiceEndpointList": {
      "type": "array"
    },
    "subnetDelegations": {
      "type": "array"
    }
  },
  "variables": {
    "deploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/das-platform-building-blocks/master/templates/",
    "resourceNamePrefix": "[toLower(concat('das-', parameters('resourceEnvironmentName'),'-', parameters('serviceName')))]",
    "resourceGroupName": "[concat(variables('resourceNamePrefix'),'-rg')]",
    "webJobAppServicePlanName": "[concat(variables('resourceNamePrefix'),'-webjob-asp')]",
    "employerRecruitAppServiceName": "[concat(variables('resourceNamePrefix'), '-as')]",
    "providerRecruitAppServiceName": "[concat(variables('resourceNamePrefix'), '-pr-as')]",
    "qaAppServiceName": "[concat(variables('resourceNamePrefix'), '-qa-as')]",
    "cosmosDbName": "[concat(variables('resourceNamePrefix'),'-cdb')]",
    "webjobAppServiceName": "[concat(variables('resourceNamePrefix'), '-webjob-as')]",
    "storageAccountName": "[toLower(concat('das', parameters('resourceEnvironmentName'), parameters('serviceName'), 'str'))]"
  },
  "resources": [
    {
      "apiVersion": "2020-10-01",
      "name": "[variables('resourceGroupName')]",
      "type": "Microsoft.Resources/resourceGroups",
      "location": "[parameters('resourceGroupLocation')]",
      "tags": "[parameters('tags')]",
      "properties": {}
    },
    {
      "apiVersion": "2020-10-01",
      "name": "employer-recruit-app-insights",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'application-insights.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[variables('employerRecruitAppServiceName')]"
          },
          "attachedService": {
            "value": "[variables('employerRecruitAppServiceName')]"
          }
        }
      },
      "dependsOn": [
        "[variables('resourceGroupName')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "qa-app-insights",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'application-insights.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[variables('qaAppServiceName')]"
          },
          "attachedService": {
            "value": "[variables('qaAppServiceName')]"
          }
        }
      },
      "dependsOn": [
        "[variables('resourceGroupName')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "provider-recruit-app-insights",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'application-insights.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[variables('providerRecruitAppServiceName')]"
          },
          "attachedService": {
            "value": "[variables('providerRecruitAppServiceName')]"
          }
        }
      },
      "dependsOn": [
        "[variables('resourceGroupName')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "cosmos-db",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'cosmos-db.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "cosmosDbName": {
            "value": "[variables('cosmosDbName')]"
          },
          "cosmosDbType": {
            "value": "MongoDB"
          },
          "defaultConsistencyLevel": {
            "value": "Strong"
          },
          "ipRangeFilter": {
            "value": "[parameters('cosmosDbIpRangeFilter')]"
          },
          "serverVersion": {
            "value": "[parameters('cosmosDbServerVersion')]"
          }
        }
      },
      "dependsOn": [
        "[variables('resourceGroupName')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "cosmos-db-database-deployment",
      "dependsOn": [
        "cosmos-db"
      ],
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'cosmos-db-database.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "cosmosDbAccountName": {
            "value": "[variables('cosmosDbName')]"
          },
          "cosmosDatabase": {
            "value": "[parameters('cosmosDatabase')]"
          },
          "cosmosDBType": {
            "value": "MongoDB"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "[concat('cosmos-db-container-', parameters('containerArray')[copyIndex()].containerName)]",
      "dependsOn": [
        "cosmos-db-database-deployment"
      ],
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "condition": "[greater(length(parameters('containerArray')), 0)]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'cosmos-db-container.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "cosmosDbAccountName": {
            "value": "[variables('cosmosDbName')]"
          },
          "cosmosDatabase": {
            "value": "[parameters('cosmosDatabase')]"
          },
          "cosmosDBType": {
            "value": "MongoDB"
          },
          "containerName": {
            "value": "[parameters('containerArray')[copyIndex()].containerName]"
          },
          "partitionKey": {
            "value": "[parameters('containerArray')[copyIndex()].partitionKey]"
          }
        }
      },
      "copy": {
        "name": "containercopy",
        "count": "[length(parameters('containerArray'))]"
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "[concat('cosmos-db-container-settings-', parameters('containerArray')[copyIndex()].containerName)]",
      "dependsOn": [
        "[concat('cosmos-db-container-', parameters('containerArray')[copyIndex()].containerName)]"
      ],
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "condition": "[greater(length(parameters('containerArray')), 0)]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'cosmos-db-container-settings.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "cosmosDbAccountName": {
            "value": "[variables('cosmosDbName')]"
          },
          "cosmosDatabase": {
            "value": "[parameters('cosmosDatabase')]"
          },
          "cosmosDBType": {
            "value": "MongoDB"
          },
          "containerName": {
            "value": "[parameters('containerArray')[copyIndex()].containerName]"
          },
          "throughput": {
            "value": "[parameters('containerArray')[copyIndex()].throughput]"
          }
        }
      },
      "copy": {
        "name": "containercopy",
        "count": "[length(parameters('containerArray'))]"
      }
    },
    {
      "condition": "[greater(length(parameters('EmployerCustomHostname')), 0)]",
      "apiVersion": "2020-10-01",
      "name": "employer-recruit-app-service-certificate",
      "resourceGroup": "[parameters('sharedEnvResourceGroup')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-certificate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultCertificateName": {
            "value": "[parameters('EmployerKeyvaultCertificateName')]"
          },
          "keyVaultName": {
            "value": "[parameters('sharedKeyvaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('sharedManagementResourceGroup')]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "employer-recruit-app-service",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-v2.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServiceName": {
            "value": "[variables('employerRecruitAppServiceName')]"
          },
          "appServicePlanName": {
            "value": "[parameters('sharedFrontEndAppServicePlanName')]"
          },
          "appServicePlanResourceGroup": {
            "value": "[parameters('sharedEnvResourceGroup')]"
          },
          "subnetResourceId": {
            "value": "[parameters('sharedFrontEndSubnetResourceId')]"
          },
          "appServiceAppSettings": {
            "value": {
              "array": [
                {
                  "name": "Authentication:Authority",
                  "value": "[parameters('Authentication').Authority]"
                },
                {
                  "name": "Authentication:MetaDataAddress",
                  "value": "[parameters('Authentication').MetaDataAddress]"
                },
                {
                  "name": "Authentication:ClientId",
                  "value": "[parameters('Authentication').ClientId]"
                },
                {
                  "name": "Authentication:ClientSecret",
                  "value": "[parameters('Authentication').ClientSecret]"
                },
                {
                  "name": "Slack:WebhookUrl",
                  "value": "[parameters('SlackWebhook')]"
                },
                {
                  "name": "Slack:FindAnApprenticeshipDetailPrefixUrl",
                  "value": "[parameters('FindAnApprenticeshipDetailPrefixUrl')]"
                },
                {
                  "name": "AccountApiConfiguration:ApiBaseUrl",
                  "value": "[parameters('AccountApiConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "AccountApiConfiguration:ClientId",
                  "value": "[parameters('AccountApiConfiguration').ClientId]"
                },
                {
                  "name": "AccountApiConfiguration:ClientSecret",
                  "value": "[parameters('AccountApiConfiguration').ClientSecret]"
                },
                {
                  "name": "AccountApiConfiguration:IdentifierUri",
                  "value": "[parameters('AccountApiConfiguration').IdentifierUri]"
                },
                {
                  "name": "AccountApiConfiguration:Tenant",
                  "value": "[parameters('AccountApiConfiguration').Tenant]"
                },
                {
                  "name": "ApplicationInsights:InstrumentationKey",
                  "value": "[reference('employer-recruit-app-insights').outputs.InstrumentationKey.value]"
                },
                {
                  "name": "ExternalLinks:ManageApprenticeshipSiteUrl",
                  "value": "[parameters('ExternalLinks').ManageApprenticeshipSiteUrl]"
                },
                {
                  "name": "ExternalLinks:EmployerIdamsSiteUrl",
                  "value": "[parameters('ExternalLinks').EmployerIdamsSiteUrl]"
                },
                {
                  "name": "ExternalLinks:CommitmentsSiteUrl",
                  "value": "[parameters('ExternalLinks').CommitmentsSiteUrl]"
                },
                {
                  "name": "ExternalLinks:EmployerFavouritesUrl",
                  "value": "[parameters('ExternalLinks').EmployerFavouritesUrl]"
                },
                {
                    "name": "ExternalLinks:TrainingProviderPermissionUrl",
                    "value": "[parameters('ExternalLinks').TrainingProviderPermissionUrl]"
				},
                {
                  "name": "Features:SetNotificationPreferences",
                  "value": "[parameters('Features').SetNotificationPreferences]"
                },
                {
                  "name": "ASPNETCORE_ENVIRONMENT",
                  "value": "[toUpper(parameters('EnvironmentFullName'))]"
                },
                {
                  "name": "GoogleMapsPrivateKey",
                  "value": "[parameters('GoogleMapsPrivateKey')]"
                },
                {
                  "name": "PostcodeAnywhere:Key",
                  "value": "[parameters('PostcodeAnywhereKey')]"
                },
                {
                  "name": "FaaConfiguration:StorageConnectionString",
                  "value": "[parameters('FaaConfiguration').StorageConnectionString]"
                },
                {
                  "name": "UseTableStorageQueryStore",
                  "value": "[parameters('UseTableStorageQueryStore')]"
                },
                {
                  "name": "ZenDesk:SnippetSectionId",
                  "value": "[parameters('ZenDesk').EmployerSnippetSectionId]"
                },
                {
                  "name": "ZenDesk:SnippetKey",
                  "value": "[parameters('ZenDesk').SnippetKey]"
                },
                {
                  "name": "ZenDesk:CobrowsingSnippetKey",
                  "value": "[parameters('ZenDesk').CobrowsingSnippetKey]"
                },
				{
                    "name": "ProviderRelationshipsApiConfiguration:ApiBaseUrl",
                    "value": "[parameters('ProviderRelationshipsApiConfiguration').ApiBaseUrl]"
                },
                {
                    "name": "ProviderRelationshipsApiConfiguration:ClientId",
                    "value": "[parameters('ProviderRelationshipsApiConfiguration').ClientId]"
                },
                {
                    "name": "ProviderRelationshipsApiConfiguration:ClientSecret",
                    "value": "[parameters('ProviderRelationshipsApiConfiguration').ClientSecret]"
                },
                {
                    "name": "ProviderRelationshipsApiConfiguration:IdentifierUri",
                    "value": "[parameters('ProviderRelationshipsApiConfiguration').IdentifierUri]"
                },
                {
                    "name": "ProviderRelationshipsApiConfiguration:Tenant",
                    "value": "[parameters('ProviderRelationshipsApiConfiguration').Tenant]"
                },
                {
                  "name": "RedisConnectionSettings:RedisConnectionString",
                  "value": "[parameters('StorageRedisConnectionString')]"
                },
                {
                  "name": "RedisConnectionSettings:DataProtectionKeysDatabase",
                  "value": "[parameters('DataProtectionKeysDatabase')]"
                }
              ]
            }
          },
          "appServiceConnectionStrings": {
            "value": {
              "array": [
                {
                  "name": "Redis",
                  "connectionString": "[parameters('LoggingRedisConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "MongoDb",
                  "connectionString": "[concat('mongodb://', variables('cosmosDbName'), ':', reference('cosmos-db').outputs.PrimaryMasterKey.value,'@', variables('cosmosDbName'), '.documents.azure.com:10255/?ssl=true&replicaSet=globaldb')]",
                  "type": "Custom"
                },
                {
                  "name": "QueueStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "TableStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                }
              ]
            }
          },
          "customHostName": {
            "value": "[parameters('EmployerCustomHostname')]"
          },
          "certificateThumbprint": {
            "value": "[if(greater(length(parameters('EmployerCustomHostname')), 0), reference('employer-recruit-app-service-certificate', '2018-11-01').outputs.certificateThumbprint.value, '')]"
          },
          "ipSecurityRestrictions": {
            "value": "[parameters('frontEndAccessRestrictions')]"
          }
        }
      }
    },
    {
      "condition": "[greater(length(parameters('QAAppCustomHostname')), 0)]",
      "apiVersion": "2020-10-01",
      "name": "qa-app-service-certificate",
      "resourceGroup": "[parameters('sharedEnvResourceGroup')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-certificate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultCertificateName": {
            "value": "[parameters('QAAppKeyvaultCertificateName')]"
          },
          "keyVaultName": {
            "value": "[parameters('sharedKeyvaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('sharedManagementResourceGroup')]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "qa-app-service",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-v2.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServiceName": {
            "value": "[variables('qaAppServiceName')]"
          },
          "appServicePlanName": {
            "value": "[parameters('sharedFrontEndAppServicePlanName')]"
          },
          "appServicePlanResourceGroup": {
            "value": "[parameters('sharedEnvResourceGroup')]"
          },
          "subnetResourceId": {
            "value": "[parameters('sharedFrontEndSubnetResourceId')]"
          },
          "appServiceAppSettings": {
            "value": {
              "array": [
                {
                  "name": "Authentication:Wtrealm",
                  "value": "[parameters('QAAuthentication').WtRealm]"
                },
                {
                  "name": "Authentication:MetaDataAddress",
                  "value": "[parameters('QAAuthentication').MetaDataAddress]"
                },
                {
                  "name": "ApplicationInsights:InstrumentationKey",
                  "value": "[reference('qa-app-insights').outputs.InstrumentationKey.value]"
                },
                {
                  "name": "ASPNETCORE_ENVIRONMENT",
                  "value": "[toUpper(parameters('EnvironmentFullName'))]"
                },
                {
                  "name": "GoogleMapsPrivateKey",
                  "value": "[parameters('GoogleMapsPrivateKey')]"
                },
                {
                  "name": "LegacyAuthorization:ClaimType",
                  "value": "[parameters('QALegacyAuthorization').ClaimType]"
                },
                {
                  "name": "LegacyAuthorization:UserClaimValue",
                  "value": "[parameters('QALegacyAuthorization').UserClaimValue]"
                },
                {
                  "name": "LegacyAuthorization:TeamLeadClaimValue",
                  "value": "[parameters('QALegacyAuthorization').TeamLeadClaimValue]"
                },
                {
                  "name": "Authorization:ClaimType",
                  "value": "[parameters('QAAuthorization').ClaimType]"
                },
                {
                  "name": "Authorization:UserClaimValue",
                  "value": "[parameters('QAAuthorization').UserClaimValue]"
                },
                {
                  "name": "Authorization:TeamLeadClaimValue",
                  "value": "[parameters('QAAuthorization').TeamLeadClaimValue]"
                },
                {
                  "name": "ExternalLinks:StaffIdamsUrl",
                  "value": "[parameters('ExternalLinks').StaffIdamsUrl]"
                },
                {
                  "name": "VacancyReviewAssignationTimeoutMinutes",
                  "value": "[parameters('VacancyReviewAssignationTimeoutMinutes')]"
                },
                {
                  "name": "Slack:WebhookUrl",
                  "value": "[parameters('SlackWebhook')]"
                },
                {
                  "name": "Slack:FindAnApprenticeshipDetailPrefixUrl",
                  "value": "[parameters('FindAnApprenticeshipDetailPrefixUrl')]"
                },
                {
                  "name": "UseTableStorageQueryStore",
                  "value": "[parameters('UseTableStorageQueryStore')]"
                },
                {
                  "name": "FaaConfiguration:StorageConnectionString",
                  "value": "[parameters('FaaConfiguration').StorageConnectionString]"
                },
                {
                  "name": "RedisConnectionSettings:RedisConnectionString",
                  "value": "[parameters('StorageRedisConnectionString')]"
                },
                {
                  "name": "RedisConnectionSettings:DataProtectionKeysDatabase",
                  "value": "[parameters('DataProtectionKeysDatabase')]"
                }
              ]
            }
          },
          "appServiceConnectionStrings": {
            "value": {
              "array": [
                {
                  "name": "Redis",
                  "connectionString": "[parameters('LoggingRedisConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "MongoDb",
                  "connectionString": "[concat('mongodb://', variables('cosmosDbName'), ':', reference('cosmos-db').outputs.PrimaryMasterKey.value,'@', variables('cosmosDbName'), '.documents.azure.com:10255/?ssl=true&replicaSet=globaldb')]",
                  "type": "Custom"
                },
                {
                  "name": "QueueStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "TableStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "CommunicationsStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                }
              ]
            }
          },
          "customHostName": {
            "value": "[parameters('QAAppCustomHostname')]"
          },
          "certificateThumbprint": {
            "value": "[if(greater(length(parameters('EmployerCustomHostname')), 0), reference('qa-app-service-certificate', '2018-11-01').outputs.certificateThumbprint.value, '')]"
          },
          "ipSecurityRestrictions": {
            "value": "[parameters('frontEndAccessRestrictions')]"
          }
        }
      }
    },
    {
      "condition": "[greater(length(parameters('ProviderKeyvaultCertificateName')), 0)]",
      "apiVersion": "2020-10-01",
      "name": "provider-recruit-app-service-certificate",
      "resourceGroup": "[parameters('sharedEnvResourceGroup')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-certificate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultCertificateName": {
            "value": "[parameters('ProviderKeyvaultCertificateName')]"
          },
          "keyVaultName": {
            "value": "[parameters('sharedKeyvaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('sharedManagementResourceGroup')]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "provider-recruit-app-service",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-v2.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServiceName": {
            "value": "[variables('providerRecruitAppServiceName')]"
          },
          "appServicePlanName": {
            "value": "[parameters('sharedFrontEndAppServicePlanName')]"
          },
          "appServicePlanResourceGroup": {
            "value": "[parameters('sharedEnvResourceGroup')]"
          },
          "subnetResourceId": {
            "value": "[parameters('sharedFrontEndSubnetResourceId')]"
          },
          "appServiceAppSettings": {
            "value": {
              "array": [
                {
                  "name": "Authentication:WtRealm",
                  "value": "[parameters('ProviderAuthentication').WtRealm]"
                },
                {
                  "name": "Authentication:MetaDataAddress",
                  "value": "[parameters('ProviderAuthentication').MetaDataAddress]"
                },
                {
                  "name": "Slack:WebhookUrl",
                  "value": "[parameters('SlackWebhook')]"
                },
                {
                  "name": "ApplicationInsights:InstrumentationKey",
                  "value": "[reference('provider-recruit-app-insights').outputs.InstrumentationKey.value]"
                },
                {
                  "name": "Slack:FindAnApprenticeshipDetailPrefixUrl",
                  "value": "[parameters('FindAnApprenticeshipDetailPrefixUrl')]"
                },
                {
                  "name": "ExternalLinks:ProviderApprenticeshipSiteUrl",
                  "value": "[parameters('ExternalLinks').ProviderApprenticeshipSiteUrl]"
                },
                {
                  "name": "ExternalLinks:CommitmentsSiteUrl",
                  "value": "[parameters('ExternalLinks').ProviderCommitmentsSiteUrl]"
                },
                {
                  "name": "ExternalLinks:ReservationsSiteUrl",
                  "value": "[parameters('ExternalLinks').ReservationsSiteUrl]"
                },
                {
                  "name": "Features:SetNotificationPreferences",
                  "value": "[parameters('Features').SetNotificationPreferences]"
                },
                {
                  "name": "ExternalLinks:SignProviderAgreementUrl",
                  "value": "[parameters('ExternalLinks').SignProviderAgreementUrl]"
                },
                {
                  "name": "ASPNETCORE_ENVIRONMENT",
                  "value": "[toUpper(parameters('EnvironmentFullName'))]"
                },
                {
                  "name": "GoogleMapsPrivateKey",
                  "value": "[parameters('GoogleMapsPrivateKey')]"
                },
                {
                  "name": "PostcodeAnywhere:Key",
                  "value": "[parameters('PostcodeAnywhereKey')]"
                },
                {
                  "name": "ZenDesk:SnippetSectionId",
                  "value": "[parameters('ZenDesk').ProviderSnippetSectionId]"
                },
                {
                  "name": "ZenDesk:SnippetKey",
                  "value": "[parameters('ZenDesk').SnippetKey]"
                },
                {
                  "name": "ZenDesk:CobrowsingSnippetKey",
                  "value": "[parameters('ZenDesk').CobrowsingSnippetKey]"
                },
                {
                  "name": "UseTableStorageQueryStore",
                  "value": "[parameters('UseTableStorageQueryStore')]"
                },
                {
                  "name": "FaaConfiguration:StorageConnectionString",
                  "value": "[parameters('FaaConfiguration').StorageConnectionString]"
                },
                {
                  "name": "AccountApiConfiguration:ApiBaseUrl",
                  "value": "[parameters('AccountApiConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "AccountApiConfiguration:ClientId",
                  "value": "[parameters('AccountApiConfiguration').ClientId]"
                },
                {
                  "name": "AccountApiConfiguration:ClientSecret",
                  "value": "[parameters('AccountApiConfiguration').ClientSecret]"
                },
                {
                  "name": "AccountApiConfiguration:IdentifierUri",
                  "value": "[parameters('AccountApiConfiguration').IdentifierUri]"
                },
                {
                  "name": "AccountApiConfiguration:Tenant",
                  "value": "[parameters('AccountApiConfiguration').Tenant]"
                },
                {
                  "name": "PasAccountApiConfiguration:ApiBaseUrl",
                  "value": "[parameters('PasAccountApiConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "PasAccountApiConfiguration:ClientId",
                  "value": "[parameters('PasAccountApiConfiguration').ClientId]"
                },
                {
                  "name": "PasAccountApiConfiguration:ClientSecret",
                  "value": "[parameters('PasAccountApiConfiguration').ClientSecret]"
                },
                {
                  "name": "PasAccountApiConfiguration:IdentifierUri",
                  "value": "[parameters('PasAccountApiConfiguration').IdentifierUri]"
                },
                {
                  "name": "PasAccountApiConfiguration:Tenant",
                  "value": "[parameters('PasAccountApiConfiguration').Tenant]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:ApiBaseUrl",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:ClientId",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').ClientId]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:ClientSecret",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').ClientSecret]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:IdentifierUri",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').IdentifierUri]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:Tenant",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').Tenant]"
                },
                {
                  "name": "RedisConnectionSettings:RedisConnectionString",
                  "value": "[parameters('StorageRedisConnectionString')]"
                },
                {
                  "name": "RedisConnectionSettings:DataProtectionKeysDatabase",
                  "value": "[parameters('DataProtectionKeysDatabase')]"
                }
              ]
            }
          },
          "appServiceConnectionStrings": {
            "value": {
              "array": [
                {
                  "name": "Redis",
                  "connectionString": "[parameters('LoggingRedisConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "MongoDb",
                  "connectionString": "[concat('mongodb://', variables('cosmosDbName'), ':', reference('cosmos-db').outputs.PrimaryMasterKey.value,'@', variables('cosmosDbName'), '.documents.azure.com:10255/?ssl=true&replicaSet=globaldb')]",
                  "type": "Custom"
                },
                {
                  "name": "QueueStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "TableStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                }
              ]
            }
          },
          "customHostName": {
            "value": "[parameters('ProviderCustomHostname')]"
          },
          "certificateThumbprint": {
            "value": "[if(greater(length(parameters('EmployerCustomHostname')), 0), reference('provider-recruit-app-service-certificate', '2018-11-01').outputs.certificateThumbprint.value, '')]"
          },
          "ipSecurityRestrictions": {
            "value": "[parameters('frontEndAccessRestrictions')]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "storage-account",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'storage-account-arm.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          }
        }
      },
      "dependsOn": [
        "[variables('resourceGroupName')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "webjob-app-service-plan",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('webJobAppServicePlanName')]"
          },
          "aspSize": {
            "value": "[parameters('webJobAspSize')]"
          },
          "aspInstances": {
            "value": "[parameters('webJobAspInstances')]"
          },
          "nonASETier": {
            "value": "[parameters('webJobNonASETier')]"
          }
        }
      },
      "dependsOn": [
        "[variables('resourceGroupName')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "webjob-app-service-subnet",
      "resourceGroup": "[parameters('sharedEnvResourceGroup')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'subnet.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('sharedEnvVirtualNetworkName')]"
          },
          "subnetName": {
            "value": "[parameters('webjobSubnetObject').name]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('webjobSubnetObject').addressSpace]"
          },
          "serviceEndpointList": {
            "value": "[parameters('subnetServiceEndpointList')]"
          },
          "delegations": {
            "value": "[parameters('subnetDelegations')]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "webjob-apim-product-subscription",
      "resourceGroup": "[parameters('sharedApimResourceGroup')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'apim/apim-subscription.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apimName": {
            "value": "[parameters('sharedApimName')]"
          },
          "subscriptionName": {
            "value": "[variables('webjobAppServiceName')]"
          },
          "subscriptionScope": {
            "value": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('sharedApimResourceGroup'), '/providers/Microsoft.ApiManagement/service/', parameters('sharedApimName'), '/products/RecruitOuterApi')]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "webjob-app-service",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'app-service-v2.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServiceName": {
            "value": "[variables('webjobAppServiceName')]"
          },
          "appServicePlanName": {
            "value": "[variables('webJobAppServicePlanName')]"
          },
          "appServicePlanResourceGroup": {
            "value": "[variables('resourcegroupName')]"
          },
          "subnetResourceId": {
            "value": "[reference('webjob-app-service-subnet').outputs.subnetResourceId.value]"
          },
          "appServiceAppSettings": {
            "value": {
              "array": [
                {
                  "name": "ASPNETCORE_ENVIRONMENT",
                  "value": "[toUpper(parameters('EnvironmentFullName'))]"
                },
                {
                  "name": "ApprenticeshipProgrammesApiBaseUrl",
                  "value": "[parameters('ApprenticeshipProgrammesApiBaseUrl')]"
                },
                {
                  "name": "AccountApiConfiguration:ApiBaseUrl",
                  "value": "[parameters('AccountApiConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "AccountApiConfiguration:ClientId",
                  "value": "[parameters('AccountApiConfiguration').ClientId]"
                },
                {
                  "name": "AccountApiConfiguration:ClientSecret",
                  "value": "[parameters('AccountApiConfiguration').ClientSecret]"
                },
                {
                  "name": "AccountApiConfiguration:IdentifierUri",
                  "value": "[parameters('AccountApiConfiguration').IdentifierUri]"
                },
                {
                  "name": "AccountApiConfiguration:Tenant",
                  "value": "[parameters('AccountApiConfiguration').Tenant]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:ApiBaseUrl",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:ClientId",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').ClientId]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:ClientSecret",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').ClientSecret]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:IdentifierUri",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').IdentifierUri]"
                },
                {
                  "name": "ProviderRelationshipsApiConfiguration:Tenant",
                  "value": "[parameters('ProviderRelationshipsApiConfiguration').Tenant]"
                },
                {
                  "name": "VacancyApiConfiguration:ApiSearchBaseUrl",
                  "value": "[parameters('VacancyApiConfiguration').ApiSearchBaseUrl]"
                },
                {
                  "name": "VacancyApiConfiguration:ApiReadSubscriptionKey",
                  "value": "[parameters('VacancyApiConfiguration').ApiReadSubscriptionKey]"
                },
                {
                  "name": "Slack:WebhookUrl",
                  "value": "[parameters('SlackWebhook')]"
                },
                {
                  "name": "Slack:FindAnApprenticeshipDetailPrefixUrl",
                  "value": "[parameters('FindAnApprenticeshipDetailPrefixUrl')]"
                },
                {
                  "name": "FaaConfiguration:StorageConnectionString",
                  "value": "[parameters('FaaConfiguration').StorageConnectionString]"
                },
                {
                  "name": "Geocode:PostcodeAnywhereKey",
                  "value": "[parameters('GeocodePostcodeAnywhereKey')]"
                },
                {
                  "name": "DasSharedNServiceBusConfiguration:ConnectionString",
                  "value": "[parameters('DasSharedNServiceBusConfiguration').ConnectionString]"
                },
                {
                  "name": "DasSharedNServiceBusConfiguration:NServiceBusLicense",
                  "value": "[parameters('DasSharedNServiceBusConfiguration').NServiceBusLicense]"
                },
                {
                  "name": "CommunicationsConfiguration:EmployersApprenticeshipServiceUrl",
                  "value": "[parameters('CommunicationsConfiguration').EmployersApprenticeshipServiceUrl]"
                },
                {
                  "name": "CommunicationsConfiguration:ProvidersApprenticeshipServiceUrl",
                  "value": "[parameters('CommunicationsConfiguration').ProvidersApprenticeshipServiceUrl]"
                },
                {
                  "name": "NotificationsApiClientConfiguration:ApiBaseUrl",
                  "value": "[parameters('NotificationsApiClientConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "NotificationsApiClientConfiguration:ClientToken",
                  "value": "[parameters('NotificationsApiClientConfiguration').ClientToken]"
                },
                {
                  "name": "PasAccountApiConfiguration:ApiBaseUrl",
                  "value": "[parameters('PasAccountApiConfiguration').ApiBaseUrl]"
                },
                {
                  "name": "PasAccountApiConfiguration:ClientId",
                  "value": "[parameters('PasAccountApiConfiguration').ClientId]"
                },
                {
                  "name": "PasAccountApiConfiguration:ClientSecret",
                  "value": "[parameters('PasAccountApiConfiguration').ClientSecret]"
                },
                {
                  "name": "PasAccountApiConfiguration:IdentifierUri",
                  "value": "[parameters('PasAccountApiConfiguration').IdentifierUri]"
                },
                {
                  "name": "PasAccountApiConfiguration:Tenant",
                  "value": "[parameters('PasAccountApiConfiguration').Tenant]"
                },
                {
                  "name": "Encodings",
                  "value": "[parameters('DasEncodings')]"
                },
                {
                  "name": "OuterApiConfiguration:BaseUrl",
                  "value": "[parameters('recruitOuterApiConfigurationBaseUrl')]"
                },
                {
                  "name": "OuterApiConfiguration:Key",
                  "value": "[reference(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('sharedApimResourceGroup'), '/providers/Microsoft.ApiManagement/service/', parameters('sharedApimName'), '/subscriptions/', variables('webjobAppServiceName')), '2019-01-01').primaryKey]"
                }
              ]
            }
          },
          "appServiceConnectionStrings": {
            "value": {
              "array": [
                {
                  "name": "ConfigurationStorageConnectionString",
                  "connectionString": "[parameters('ConfigurationStorageConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "Redis",
                  "connectionString": "[parameters('LoggingRedisConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "MongoDb",
                  "connectionString": "[concat('mongodb://', variables('cosmosDbName'), ':', reference('cosmos-db').outputs.PrimaryMasterKey.value,'@', variables('cosmosDbName'), '.documents.azure.com:10255/?ssl=true&replicaSet=globaldb')]",
                  "type": "Custom"
                },
                {
                  "name": "QueueStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "CommunicationsStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "AzureWebJobsDashboard",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "AzureWebJobsStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                },
                {
                  "name": "EmployerAccountsSqlDbConnectionString",
                  "connectionString": "[parameters('EmployerAccountsSqlDbConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "EmployerFinanceSqlDbConnectionString",
                  "connectionString": "[parameters('EmployerFinanceSqlDbConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "VacancyAnalyticEventsSqlDbConnectionString",
                  "connectionString": "[parameters('VacancyAnalyticEventsSqlDbConnectionString')]",
                  "type": "Custom"
                },
                {
                  "name": "TableStorage",
                  "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',reference('storage-account').outputs.storageKey.value)]",
                  "type": "Custom"
                }
              ]
            }
          },
          "deployStagingSlot": {
            "value": false
          },
          "appServiceVirtualApplications": {
            "value": [
              {
                "virtualPath": "/",
                "physicalPath": "site\\wwwroot",
                "preloadEnabled": true
              },
              {
                "virtualPath": "/Recruit.Vacancies.Jobs",
                "physicalPath": "site\\wwwroot\\app_data\\jobs\\continuous\\Recruit.Vacancies.Jobs",
                "preloadEnabled": false
              }
            ]
          },
          "ipSecurityRestrictions": {
            "value": "[parameters('workerAccessRestrictions')]"
          }
        }
      },
      "dependsOn": [
        "webjob-app-service-plan",
        "webjob-apim-product-subscription"
      ]
    }
  ],
  "outputs": {
    "ResourceGroupName": {
      "type": "string",
      "value": "[variables('resourceGroupName')]"
    },
    "CosmosDbName": {
      "type": "string",
      "value": "[variables('cosmosDbName')]"
    },
    "EmployerAppServiceName": {
      "type": "string",
      "value": "[variables('employerRecruitAppServiceName')]"
    },
    "ProviderAppServiceName": {
      "type": "string",
      "value": "[variables('providerRecruitAppServiceName')]"
    },
    "QAAppServiceName": {
      "type": "string",
      "value": "[variables('qaAppServiceName')]"
    },
    "StorageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    }
  }
}